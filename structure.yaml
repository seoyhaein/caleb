# 앱 기본 디렉토리 구조 설정 파일
# 최상위 앱 이름 (필요 시 수정)
app_name: caleb

# 정적(Static) 구조: 앱 최초 실행 시 항상 생성되는 디렉토리 및 파일
static_structure:
  common_scripts:
    directories:
      - common_scripts
    files:
      # executor.sh: 실행 스크립트
      - path: common_scripts/executor.sh
        # literal block scalar 로 처리되어 줄바꿈과 공백(들여쓰기)을 그대로 보존
        content: |
          #!/usr/bin/env bash

          result_log="/app/result.log"
          temp_status_log="/app/exit_code_temp.log"  # 임시 로그 파일
          status_log="/app/exit_code.log"  # 종료 코드 기록용 로그 파일
          > "$result_log"
          > "$status_log"
          > "$temp_status_log"

          # long_task 함수
          long_task() {
              if ! bash -n ./scripts/user_script.sh; then
                  echo "Syntax error in user_script.sh" | tee -a "$result_log"
                  return 1
              fi

              bash ./scripts/user_script.sh 2>&1 | tee -a "$result_log"
              task_exit_code=${PIPESTATUS[0]}
              return $task_exit_code
          }

          long_task
          task_exit_code=$?

          # 임시 파일에 종료 코드 기록
          {
              flock -e 200
              echo "exit_code:$task_exit_code" > "$temp_status_log"
          } 200>"$temp_status_temp.lock"

          # 임시 파일을 최종 파일로 이동
          mv "$temp_status_log" "$status_log"

          # 헬스체크를 위해서 넣음. TODO 추후 조정 필요
          sleep 10

          # 종료 코드 확인 및 에러 처리
          if [ "$task_exit_code" -ne 0 ]; then
              echo "Task failed with exit code $task_exit_code" | tee -a "$result_log"
          else
              echo "Task completed successfully" | tee -a "$result_log"
          fi

          exit $task_exit_code

      # healthcheck.sh: 헬스체크 스크립트
      - path: common_scripts/healthcheck.sh
        content: |
          #!/usr/bin/env bash

          STATUS_LOG_FILE="internal_status.log"
          EXIT_CODE_LOG_FILE="/app/exit_code.log"
          LOCK_FILE="$EXIT_CODE_LOG_FILE.lock"

          # 로그 메시지 기록 함수
          log_message() {
              local message="$1"
              echo "$(date --iso-8601=seconds) - $message" >> "$STATUS_LOG_FILE"
          }

          # 실행 중인 executor.sh 프로세스 확인
          pids=($(ps -eo pid,cmd | grep -w "[b]ash /app/executor.sh" | awk '{print $1}'))
          if [ ${#pids[@]} -eq 0 ]; then
              log_message "Healthcheck: Process not found (Unhealthy)"
              exit 1
          fi

          # 모든 PID의 상태 확인
          all_healthy=true
          for pid in "${pids[@]}"; do
            log_message "Process PID: '$pid'"
            status=$(ps -p "$pid" -o stat= | tr -d ' ')
            log_message "Process status: '$status'"

            case "$status" in
              R*|S*)
                log_message "Healthcheck: Process PID $pid is healthy (running or sleeping)"
                ;;
              D*|Z*|T*|X*|*)
                log_message "Healthcheck: Process PID $pid is unhealthy"
                all_healthy=false
                ;;
            esac
          done

          # 종료 코드 파일 확인 및 프로세스 상태에 따른 처리
          if [ ! -f "$LOCK_FILE" ]; then
              touch "$LOCK_FILE"
          fi

          # 종료 코드 초기화
          exit_code=""

          # 종료 코드 파일 확인 및 프로세스 상태에 따른 처리
          if [ -s "$EXIT_CODE_LOG_FILE" ]; then
              {
                  log_message "$EXIT_CODE_LOG_FILE exists and not empty"
                  flock -s 200  # 공유 잠금 설정

                  # 파일 내용을 한 줄씩 읽어 종료 코드 추출
                  while read -r line || [ -n "$line" ]; do
                     log_message "Reading line: $line"  # 읽은 줄을 로그로 기록
                      if [[ "$line" == exit_code:* ]]; then
                        log_message "Matching line found"  # 디버그 메시지 추가
                        exit_code=${line#exit_code:}
                        log_message "Extracted exit_code: $exit_code"  # 디버그 메시지 추가
                        break  # exit_code를 찾은 후에는 더 이상 읽지 않음
                      fi
                  done < "$EXIT_CODE_LOG_FILE"
              } 200<"$LOCK_FILE"

              # 종료 코드와 상태에 따른 헬스 체크 결과 처리
              if [[ "$exit_code" -eq 0 && "$all_healthy" = true ]]; then
                  log_message "Healthcheck: All processes are healthy, and exit code is 0. exit_code is $exit_code"
                  exit 0
              else
                  log_message "Healthcheck: Exit code is non-zero or one or more processes are unhealthy"
                  exit 1
              fi
          else
              # 종료 코드 파일이 없는 경우 실행 중인 상태로 간주
              log_message "$EXIT_CODE_LOG_FILE not exists or empty"
              if [ "$all_healthy" = true ]; then
                  log_message "Healthcheck: Process is still running and healthy (no exit code yet)"
                  exit 0
              else
                  log_message "Healthcheck: Process state unknown (no exit code file and unhealthy status)"
                  exit 1
              fi
          fi

# 동적 구조: 추후 파이프라인 실행 시 생성되는 폴더 등 확장 가능
dynamic_structure:
  runs: {}
